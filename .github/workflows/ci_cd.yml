name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/document-portal
  PYTHON_VERSION: "3.10"

jobs:
  # Pre-commit tests - Fast unit tests
  pre-commit-tests:
    runs-on: ubuntu-latest
    name: Pre-commit Tests (Fast)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test database
        run: |
          mkdir -p test_data
          touch test_data/test.db

      - name: Run pre-commit tests
        run: |
          pytest tests/test_pre_commit.py -v --tb=short --durations=5
        env:
          UPLOAD_BASE: "./test_data"
          FAISS_BASE: "./test_data"

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pre-commit-test-results
          path: .coverage
          retention-days: 30

  # Post-commit tests - Integration tests
  post-commit-tests:
    runs-on: ubuntu-latest
    name: Post-commit Tests (Integration)
    needs: pre-commit-tests
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test directories
        run: |
          mkdir -p test_data/uploads
          mkdir -p test_data/faiss
          touch test_data/test.db

      - name: Run post-commit tests with coverage
        run: |
          pytest tests/test_post_commit.py -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing --durations=10
        env:
          UPLOAD_BASE: "./test_data/uploads"
          FAISS_BASE: "./test_data/faiss"
          FAISS_INDEX_NAME: "test_index"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration-tests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: post-commit-test-results
          path: |
            coverage.xml
            .coverage
          retention-days: 30

  # Security and code quality checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    needs: pre-commit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r . -x tests/ -f json -o bandit-report.json || true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Build and push Docker image
  build-and-push:
    runs-on: ubuntu-latest
    name: Build & Push Docker Image
    needs: [pre-commit-tests, post-commit-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update deployment status
        if: success()
        run: |
          echo "Docker image pushed successfully: ${{ steps.meta.outputs.tags }}"

  # Deployment notification
  notify:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [build-and-push]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "✅ Deployment successful! Docker image is ready."
          else
            echo "❌ Deployment failed. Check the logs."
            exit 1
