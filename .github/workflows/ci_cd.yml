name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/document-portal
  PYTHON_VERSION: "3.10"

jobs:
  # Setup job - Prepare dependencies once
  setup:
    runs-on: ubuntu-latest
    name: Setup Dependencies
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test environment
        run: |
          mkdir -p test_data/uploads test_data/faiss
          touch test_data/test.db

      - name: Cache test environment
        uses: actions/cache@v3
        with:
          path: test_data/
          key: test-env-${{ github.sha }}

  # Fast unit tests (runs in parallel with other jobs)
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}

      - name: Restore test environment
        uses: actions/cache@v3
        with:
          path: test_data/
          key: test-env-${{ github.sha }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          pytest tests/test_pre_commit.py -v --tb=short --durations=5 -x --ff
        env:
          UPLOAD_BASE: "./test_data"
          FAISS_BASE: "./test_data"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: unit-test-results
          path: .coverage
          retention-days: 7

  # Security and code quality (runs in parallel)
  security-scan:
    runs-on: ubuntu-latest
    name: Security & Code Quality
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache security tools
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: security-tools-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run security scans in parallel
        run: |
          # Run bandit and safety in parallel
          bandit -r . -x tests/ -f json -o bandit-report.json &
          safety check --json --output safety-report.json &
          wait

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 7

  # Integration tests (only after unit tests pass)
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [setup, unit-tests]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}

      - name: Restore test environment
        uses: actions/cache@v3
        with:
          path: test_data/
          key: test-env-${{ github.sha }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests
        run: |
          pytest tests/test_post_commit.py -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing --durations=10 -x --ff
        env:
          UPLOAD_BASE: "./test_data/uploads"
          FAISS_BASE: "./test_data/faiss"
          FAISS_INDEX_NAME: "test_index"

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage.xml
          flags: integration-tests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: integration-test-results
          path: coverage.xml
          retention-days: 7

  # Docker build (only for main/develop pushes, runs in parallel with tests after setup)
  docker-build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: setup
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (no push yet)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/docker-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image.tar
          retention-days: 1

  # Deploy only after all tests pass
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [unit-tests, integration-tests, security-scan, docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/docker-image.tar

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker images --format "table {{.Repository}}:{{.Tag}}" | grep "${{ env.DOCKER_IMAGE }}" | while read image; do
            docker push "$image"
          done

      - name: Deployment success
        run: echo "✅ Deployment completed successfully!"

  # Notification (only for main branch)
  notify:
    runs-on: ubuntu-latest
    name: Notify
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ Pipeline completed successfully!"
          else
            echo "❌ Pipeline failed. Check logs for details."
            exit 1
          fi
